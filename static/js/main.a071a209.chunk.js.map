{"version":3,"sources":["serviceWorker.js","reducers/counterReducer.js","actions/ActionType.js","reducers/historyReducer.js","reducers/index.js","containers/Counter.js","actions/index.js","containers/AddCounter.js","containers/RemoveCounter.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","counterReducer","state","arguments","length","undefined","action","type","payload","historyReducer","concat","counterApp","combineReducers","Counter","historyElements","_this","props","history","map","count","react_default","a","createElement","className","this","Component","connect","addCounter","increment","removeCounter","AddCounter","onClick","e","preventDefault","dispatch","setHistory","actions","bindActionCreators","Object","objectSpread","RemoveCounter","App","containers_AddCounter","containers_RemoveCounter","containers_Counter","store","createStore","reducer","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a071a209.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionType from '../actions/ActionType';\n\nconst counterReducer = (state = 0, action) => {\n  var newState;\n  switch (action.type) {\n    case actionType.ADD_COUNTER:\n      newState = state  + action.payload;\n      return newState;\n    case actionType.REMOVE_COUNTER:\n      newState = state - action.payload;\n      return newState;\n    default:\n      return state\n  }\n}\n\nexport default counterReducer;","export const ADD_COUNTER = 'ADD_COUNTER';\nexport const REMOVE_COUNTER = 'REMOVE_COUNTER';\nexport const SET_HISTORY = 'SET_HISTORY';","import * as actionType from '../actions/ActionType'\n\nconst historyReducer = (state = [], action) => {\n    switch (action.type) {\n        case actionType.SET_HISTORY:\n            return state.concat([action.payload])\n        default:\n            return state;\n    }\n}\n\nexport default historyReducer","import { combineReducers } from 'redux';\nimport counterReducer from './counterReducer';\nimport historyReducer from './historyReducer';\n\nconst counterApp = combineReducers({\n  counterReducer,\n  historyReducer\n})\n\nexport default counterApp","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Counter extends Component {\n\n  historyElements = () => {\n    return this.props.history.map((count) => <li>{count}</li>)\n  }\n\n  render(){\n    return (\n      <div className=\"cotainer\">\n        <div className=\"notification\">\n          <h1>\n            {this.props.count}\n          </h1>\n          <ul>\n            {this.historyElements()}\n          </ul>\n        </div>\n    </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    count: state.counterReducer,\n    history: state.historyReducer\n  };\n}\n\nexport default connect(mapStateToProps)(Counter);","import * as actionType from './ActionType';\n\nexport const addCounter = (increment) => ({\n    type: actionType.ADD_COUNTER,\n    payload: increment\n});\n\nexport const removeCounter = () => ({\n    type: actionType.REMOVE_COUNTER,\n    payload: 1\n});\n\nexport const setHistory = (count) => ({\n    type: actionType.SET_HISTORY,\n    payload: count\n})","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addCounter, setHistory } from '../actions';\nimport { bindActionCreators } from 'redux';\n\nclass AddCounter extends Component {\n\n\n\n  render() {\n\n    const count = this.props.count;\n\n    return (\n      <div className=\"container\">\n        <form>\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button className=\"button is-primary\"\n                onClick={(e) => { \n                  e.preventDefault(); \n                  this.props.dispatch(addCounter(2));\n                  this.props.dispatch(setHistory(count));\n                 }}\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  let actions = bindActionCreators({ addCounter })\n  return { ...actions, dispatch }\n}\n\nfunction mapStateToProps(state){\n  return { count: state.counterReducer }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCounter);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { removeCounter } from '../actions';\nimport { bindActionCreators } from 'redux';\n\nclass RemoveCounter extends Component {\n\n   render() {\n     return (\n           <div className=\"container\">\n            <form>\n              <div className=\"field is-grouped\">\n                <div className=\"control\">\n                  <button className=\"button is-primary\" \n                      onClick={(e) => {e.preventDefault();this.props.dispatch(removeCounter())}}>\n                      Remove {this.props.count}\n                  </button>\n                </div>\n              </div>\n            </form>\n            </div>\n     )\n   }\n}\n\n// function mapDispatchToProps(dispatch) {\n//   return { actions: bindActionCreators(removeCounter, dispatch) }\n// }\n\nfunction mapDispatchToProps(dispatch) {\n  let actions = bindActionCreators({ removeCounter });\n  return { ...actions, dispatch };\n}\n\nfunction mapStateToProps(state){\n  return {\n    count: state.counterReducer,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveCounter);","import React, { Component } from 'react';\n\nimport Counter from '../containers/Counter';\nimport AddCounter from '../containers/AddCounter';\nimport RemoveCounter from '../containers/RemoveCounter';\n\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <div>\n            <AddCounter></AddCounter>\n          </div>\n          <div>\n            <RemoveCounter></RemoveCounter>\n          </div>\n        </div>\n        <div>\n          <Counter></Counter>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\n\nimport './index.css';\nimport App from './containers/App';\n\nconst store = createStore(reducer);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}